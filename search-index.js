var searchIndex = new Map(JSON.parse('[\
["pcon",{"doc":"Prompt COuNter, a short kmer counter.","t":"IICCCCCCCCFFPPFPGPGPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHPPGPPPIPNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNPPPPFGNNNNNNNNNNNNNNNNNNNNN","n":["CountType","CountTypeNoAtomic","cli","count","counter","dump","error","serialize","solid","spectrum","Command","Count","Count","Csv","Dump","Dump","DumpType","Fasta","Format","Pcon","Solid","SubCommand","abundance","abundance","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","command","command_for_update","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","group_id","has_subcommand","input","inputs","into","into","into","into","into","into","kmer_size","outputs","outputs","partial_cmp","partial_cmp","quiet","record_buffer","subcommand","timestamp","to_owned","to_owned","to_possible_value","to_possible_value","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","value_variants","value_variants","verbosity","count","Counter","borrow","borrow_mut","clone","clone_into","cmp","count_fasta","count_fasta","count_fasta","count_fasta","count_fasta","default","eq","fmt","from","from_stream","from_stream","from_stream","from_stream","from_stream","get","get","get","get","get","get_raw","hash","into","k","new","new","new","new","new","partial_cmp","raw","serialize","to_owned","try_from","try_into","type_id","dump","DumpTypeFromStr","Err","Error","IO","Log","Ok","Result","TypeNotMatch","borrow","borrow_mut","fmt","fmt","from","from","from","into","source","to_string","try_from","try_into","type_id","Serialize","borrow","borrow_mut","csv","csv","csv","csv","csv","from","into","new","pcon","pcon","pcon","pcon","pcon","solid","solid","solid","solid","solid","try_from","try_into","type_id","Solid","borrow","borrow_mut","extend","from","from_count","from_path","from_stream","get","get_canonic","into","k","new","set","set_canonic","try_from","try_into","type_id","FirstMinimum","PercentAtLeast","PercentAtMost","Rarefaction","Spectrum","ThresholdMethod","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","from","from","from_count","get_threshold","into","into","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"pcon"],[10,"pcon::cli"],[129,"pcon::count"],[130,"pcon::counter"],[171,"pcon::dump"],[172,"pcon::error"],[193,"pcon::serialize"],[217,"pcon::solid"],[235,"pcon::spectrum"],[262,"clap_builder::builder::command"],[263,"core::cmp"],[264,"core::fmt"],[265,"core::fmt"],[266,"clap_builder"],[267,"core::result"],[268,"clap_builder::util::id"],[269,"core::option"],[270,"std::io"],[271,"alloc::boxed"],[272,"std::io"],[273,"stderrlog"],[274,"clap_builder::builder::possible_value"],[275,"core::any"],[276,"core::clone"],[277,"core::cmp"],[278,"core::cmp"],[279,"core::hash"],[280,"std::io::error"],[281,"core::error"],[282,"alloc::string"],[283,"std::path"],[284,"core::convert"],[285,"core::convert"]],"d":["Define count type","Define count type for all never atomic thing","Command Line Interface declaration of project pcon","Run count command","Generic struct of counter and implementation for many type","Run dump command","Error struct of project pcon","Tools to serialize a Counter","Define Solid struct","Define Spectrum struct","Prompt COuNter, a short kmer counter.","SubCommand Count","Perform count of kmer","Output in csv mode","SubCommand Dump","Convert pcon native output in other format","Choose dump type","Input in format fasta","Choose input format","Output in bin mode","Output in solid mode","Enumeration of subcommand","Get abundance","Get abundance","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get format inputs","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Get inputs","Get inputs","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get size of kmer","Get output","Get output","","","Get quiet","Get record_buffer","SubCommand","Get timestamp granularity","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get verbosity level","Run count","A counter of kmer based on cocktail crate 2bit conversion, …","","","","","","Perform count on fasta input","Perform count on fasta input","Perform count on fasta input","Perform count on fasta input","Perform count on fasta input","","","","Returns the argument unchanged.","Create a new kmer by read a file","Create a new kmer by read a file","Create a new kmer by read a file","Create a new kmer by read a file","Create a new kmer by read a file","Get count of a kmer","Get count of a kmer","Get count of a kmer","Get count of a kmer","Get count of a kmer","Get count at on index","","Calls <code>U::from(self)</code>.","Get value of k","Create a new kmer Counter with kmer size equal to k","Create a new kmer Counter with kmer size equal to k","Create a new kmer Counter with kmer size equal to k","Create a new kmer Counter with kmer size equal to k","Create a new kmer Counter with kmer size equal to k","","Get raw data","Convert counter in serializer","","","","","Run dump","Error if we can’t convert a DumpTypeFromStr","Contains the error value","Enum to manage error","Cost io error","Error in logging system configuration","Contains the success value","Alias of result","Error durring loading count type not match","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","Struct to serialize counter","","","Write kmer count in csv format","Write kmer count in csv format","Write kmer count in csv format","Write kmer count in csv format","Write kmer count in csv format","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new Serialize from a Counter","Write counter in pcon format","Write counter in pcon format","Write counter in pcon format","Write counter in pcon format","Write counter in pcon format","Convert counter in solid and write it","Convert counter in solid and write it","Convert counter in solid and write it","Convert counter in solid and write it","Convert counter in solid and write it","","","","A struct to store if a kmer is Solid or not. Only kmer …","","","Extend","Returns the argument unchanged.","Create a new Solid with count in <code>counter</code> only kmer upper …","Create a new Solid from path","Create a new Solid by read","Get the solidity status of <code>kmer</code>","Get the solidity status of a canonical <code>kmer</code>","Calls <code>U::from(self)</code>.","Get value of k","Create a new Solid for kmer size equal to <code>k</code>","Solidity status of <code>kmer</code> is set to <code>value</code>","Solidity status of a canonical<code>kmer</code> is set to <code>value</code>","","","","The first local minimum match with the intersection of …","Remove at least n percent of total kmer","Remove at most n percent of total kmer","More we remove kmer less we remove Erroneous kmer when …","A struct to represent kmer spectrum and usefull …","Based on Kmergenie we assume kmer spectrum is a mixture of …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new Spectrum with count in <code>counter</code>","Found threshold matching with method","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,13,5,0,13,0,6,0,5,5,0,1,3,10,1,3,10,1,3,13,13,10,13,5,6,1,3,10,13,5,6,1,3,5,6,5,6,5,6,10,10,5,6,10,13,5,6,1,3,1,10,13,5,6,1,3,10,13,1,3,10,13,1,3,10,1,3,13,3,1,10,13,5,6,1,3,1,1,3,5,6,10,1,10,10,5,6,5,6,10,13,5,6,1,3,10,13,5,6,1,3,10,13,5,6,1,3,10,13,1,3,10,13,1,3,5,6,10,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,47,22,0,47,47,22,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,55,55,55,55,0,0,56,55,56,55,55,55,55,55,56,55,56,56,56,55,55,56,55,56,55,56,55],"f":"``````````````````````{bd}{fd}{hh}0000000{ce{}{}}00000000000{jj}{ll}{{ce}n{}{}}0{{jj}A`}{{ll}A`}{{}h}0{{jj}Ab}{{ll}Ab}{{AdAf}Ah}{{AjAf}Ah}{{jAf}Ah}{{lAf}Ah}{{bAf}Ah}{{fAf}Ah}{bl}{cc{}}00000{Al{{B`{AdAn}}}}{Al{{B`{AjAn}}}}{Al{{B`{bAn}}}}{Al{{B`{fAn}}}}3210{{}{{Bd{Bb}}}}00{BfAb}{f{{Bl{{Bj{Bh}}}}}}{b{{Bl{{Bj{Bh}}}}}}{ce{}{}}00000{bBn}{b{{Cd{{Cb{j{Bl{{Bj{C`}}}}}}}}}}{f{{Cd{{Cb{j{Bl{{Bj{C`}}}}}}}}}}{{jj}{{Bd{A`}}}}{{ll}{{Bd{A`}}}}{AdAb}{bCf}`{AdCh}88{j{{Bd{Cj}}}}{l{{Bd{Cj}}}}{c{{B`{e}}}{}{}}00000000000{cCl{}}00000{{AdAl}{{B`{nAn}}}}{{AjAl}{{B`{nAn}}}}{{bAl}{{B`{nAn}}}}{{fAl}{{B`{nAn}}}}3210{{}{{Cn{j}}}}{{}{{Cn{l}}}}{AdD`}{b{{Bl{n}}}}`{ce{}{}}0{{{Db{c}}}{{Db{c}}}Dd}{{ce}n{}{}}{{{Db{c}}{Db{c}}}A`Df}{{{Db{Dh}}{Bj{Bh}}Cf}n}{{{Db{Dj}}{Bj{Bh}}Cf}n}{{{Db{Dl}}{Bj{Bh}}Cf}n}{{{Db{Bn}}{Bj{Bh}}Cf}n}{{{Db{Cf}}{Bj{Bh}}Cf}n}{{}{{Db{c}}}Dn}{{{Db{c}}{Db{c}}}AbE`}{{{Db{c}}Af}AhEb}{cc{}}{c{{Bl{{Db{Dh}}}}}Ed}{c{{Bl{{Db{Dj}}}}}Ed}{c{{Bl{{Db{Cf}}}}}Ed}{c{{Bl{{Db{Bn}}}}}Ed}{c{{Bl{{Db{Dl}}}}}Ed}{{{Db{Dl}}Cf}Dl}{{{Db{Bn}}Cf}Bn}{{{Db{Dj}}Cf}Dj}{{{Db{Cf}}Cf}Cf}{{{Db{Dh}}Cf}Dh}{{{Db{c}}D`}c{}}{{{Db{c}}e}nEfEh}{ce{}{}}{{{Db{c}}}Bn{}}{Bn{{Db{Dh}}}}{Bn{{Db{Cf}}}}{Bn{{Db{Bn}}}}{Bn{{Db{Dl}}}}{Bn{{Db{Dj}}}}{{{Db{c}}{Db{c}}}{{Bd{A`}}}Ej}{{{Db{c}}}{{Cn{c}}}{}}{{{Db{c}}}{{El{c}}}{}}9{c{{B`{e}}}{}{}}0{cCl{}}{f{{Bl{n}}}}````````<<{{EnAf}Ah}0{cc{}}{F`En}{FbEn}{ce{}{}}{En{{Bd{Fd}}}}{cFf{}}998`22{{{El{Cf}}Cfc}{{Bl{n}}}C`}{{{El{Bn}}Bnc}{{Bl{n}}}C`}{{{El{Dh}}Dhc}{{Bl{n}}}C`}{{{El{Dj}}Djc}{{Bl{n}}}C`}{{{El{Dl}}Dlc}{{Bl{n}}}C`}:7?{{{El{Bn}}c}{{Bl{n}}}C`}{{{El{Dj}}c}{{Bl{n}}}C`}{{{El{Dh}}c}{{Bl{n}}}C`}{{{El{Cf}}c}{{Bl{n}}}C`}{{{El{Dl}}c}{{Bl{n}}}C`}69857{c{{B`{e}}}{}{}}0{cCl{}}`>>{{FhFh}n}{cc{}}{{Bn{Cn{c}}c}FhEj}{c{{Bl{Fh}}}{{Fl{Fj}}}}{c{{Bl{Fh}}}Ed}{{FhCf}Ab}0{ce{}{}}{FhBn}{BnFh}{{FhCfAb}n}0;;:``````3333{FnFn}{{ce}n{}{}}{{FnFn}Ab}{{FnAf}Ah}<<{{{Cn{c}}}G`{{Gb{D`}}Gd}}{{G`FnGf}{{Bd{Bn}}}}999{c{{B`{e}}}{}{}}000{cCl{}}0","c":[],"p":[[5,"Count",10],[8,"CountTypeNoAtomic",0],[5,"Dump",10],[5,"Command",262],[6,"DumpType",10],[6,"Format",10],[1,"unit"],[6,"Ordering",263],[1,"bool"],[5,"Command",10],[5,"Formatter",264],[8,"Result",264],[6,"SubCommand",10],[5,"ArgMatches",265],[8,"Error",266],[6,"Result",267],[5,"Id",268],[6,"Option",269],[1,"str"],[10,"BufRead",270],[5,"Box",271],[8,"Result",172],[1,"u8"],[10,"Write",270],[1,"tuple"],[5,"Vec",272],[1,"u64"],[6,"Timestamp",273],[5,"PossibleValue",274],[5,"TypeId",275],[1,"slice"],[1,"usize"],[5,"Counter",130],[10,"Clone",276],[10,"Ord",263],[1,"u32"],[1,"u128"],[1,"u16"],[10,"Default",277],[10,"PartialEq",263],[10,"Debug",264],[10,"Read",270],[10,"Hash",278],[10,"Hasher",278],[10,"PartialOrd",263],[5,"Serialize",193],[6,"Error",172],[5,"SetLoggerError",279],[5,"Error",280],[10,"Error",281],[5,"String",282],[5,"Solid",217],[5,"Path",283],[10,"AsRef",284],[6,"ThresholdMethod",235],[5,"Spectrum",235],[10,"Into",284],[10,"Copy",285],[1,"f64"]],"b":[[136,"impl-Counter%3Cu32%3E"],[137,"impl-Counter%3Cu128%3E"],[138,"impl-Counter%3Cu16%3E"],[139,"impl-Counter%3Cu8%3E"],[140,"impl-Counter%3Cu64%3E"],[145,"impl-Counter%3Cu32%3E"],[146,"impl-Counter%3Cu128%3E"],[147,"impl-Counter%3Cu64%3E"],[148,"impl-Counter%3Cu8%3E"],[149,"impl-Counter%3Cu16%3E"],[150,"impl-Counter%3Cu16%3E"],[151,"impl-Counter%3Cu8%3E"],[152,"impl-Counter%3Cu128%3E"],[153,"impl-Counter%3Cu64%3E"],[154,"impl-Counter%3Cu32%3E"],[159,"impl-Counter%3Cu32%3E"],[160,"impl-Counter%3Cu64%3E"],[161,"impl-Counter%3Cu8%3E"],[162,"impl-Counter%3Cu16%3E"],[163,"impl-Counter%3Cu128%3E"],[182,"impl-Display-for-Error"],[183,"impl-Debug-for-Error"],[185,"impl-From%3CSetLoggerError%3E-for-Error"],[186,"impl-From%3CError%3E-for-Error"],[196,"impl-Serialize%3Cu64%3E"],[197,"impl-Serialize%3Cu8%3E"],[198,"impl-Serialize%3Cu32%3E"],[199,"impl-Serialize%3Cu128%3E"],[200,"impl-Serialize%3Cu16%3E"],[204,"impl-Serialize%3Cu8%3E"],[205,"impl-Serialize%3Cu128%3E"],[206,"impl-Serialize%3Cu32%3E"],[207,"impl-Serialize%3Cu64%3E"],[208,"impl-Serialize%3Cu16%3E"],[209,"impl-Serialize%3Cu128%3E"],[210,"impl-Serialize%3Cu64%3E"],[211,"impl-Serialize%3Cu8%3E"],[212,"impl-Serialize%3Cu16%3E"],[213,"impl-Serialize%3Cu32%3E"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
