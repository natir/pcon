var searchIndex = JSON.parse('{\
"pcon":{"doc":"","t":[0,0,0,0,0,0,5,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,13,13,4,3,3,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,5,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,5,5,5,5,5,13,13,13,4,13,4,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,13,13,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11],"n":["binding","cli","count","counter","dump","error","set_nb_threads","solid","spectrum","static_counter","pcon_counter_count_fasta","pcon_counter_free","pcon_counter_get","pcon_counter_get_canonic","pcon_counter_inc","pcon_counter_inc_canonic","pcon_counter_new","pcon_deserialize_counter","pcon_deserialize_solid","pcon_dump_csv","pcon_dump_solid","pcon_dump_spectrum","pcon_error_free","pcon_error_new","pcon_serialize_counter","pcon_serialize_solid","pcon_set_nb_threads","pcon_solid_free","pcon_solid_from_counter","pcon_solid_get","pcon_solid_get_canonic","pcon_solid_new","pcon_solid_set","pcon_solid_set_canonic","Command","Count","Dump","SubCommand","SubCommandCount","SubCommandDump","abundance","abundance","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","bin","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_count_param","check_dump_param","csv","csv","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","has_subcommand","i82level","init","init","init","init","input","inputs","into","into","into","into","into_app","into_app","into_app","into_app","into_app_for_update","into_app_for_update","into_app_for_update","into_app_for_update","kmer","output","record_buffer","solid","solid","spectrum","spectrum","subcmd","threads","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","verbosity","0","0","count","AtoCount","Count","Counter","borrow","borrow_mut","count_fasta","deref","deref_mut","deserialize","drop","from","get","get_canonic","inc","inc_canonic","init","into","into_static","k","new","serialize","try_from","try_into","type_id","binary","csv","dump","solid","spectrum","ADumpOptionMustBeSet","CantCreateFile","CantOpenFile","Cli","Cli","Error","ErrorDurringRead","ErrorDurringWrite","IO","IO","KMustBeLower32","KMustBeOdd","NoError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","into","into","into","source","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","Solid","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","from_counter","get","get_canonic","init","into","k","new","serialize","set","set_canonic","try_from","try_into","type_id","FirstMinimum","PercentAtLeast","PercentAtMost","Rarefaction","Spectrum","ThresholdMethod","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","from","from","from_counter","get_threshold","init","init","into","into","try_from","try_from","try_into","try_into","type_id","type_id","write_csv","write_histogram","StaticCounter","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","get","get_canonic","init","into","k","try_from","try_into","type_id"],"q":["pcon","","","","","","","","","","pcon::binding","","","","","","","","","","","","","","","","","","","","","","","","pcon::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pcon::cli::SubCommand","","pcon::count","pcon::counter","","","","","","","","","","","","","","","","","","","","","","","","pcon::dump","","","","","pcon::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pcon::error::Error","","pcon::solid","","","","","","","","","","","","","","","","","","","","","pcon::spectrum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pcon::static_counter","","","","","","","","","","","","","","",""],"d":["","","","","","","Set the number of threads use by pcon","","","","Perform count of kmer in fasta file in path, this file can …","Free a Counter. In Python use del on Counter object.","Get the count of value <code>kmer</code>","Get the count of value a canonical <code>kmer</code>","Increase the count of <code>kmer</code>","Increase the count of a canonical <code>kmer</code>","Create a new Counter. In python binding Counter is an …","Deserialize Counter from <code>c_path</code> in <code>counter</code> You must check …","Deserialize Solid from <code>c_path</code> in <code>counter</code> You must check …","See dump::csv. You must check value of <code>io_error</code> is equal …","See dump::solid(). You must check value of <code>io_error</code> is …","See dump::spectrum. You must check value of <code>io_error</code> is …","Free a pcon io error","Create a new pcon io error it’s init to no error, see …","Serialize Counter in path of file You must check value of …","Serialize Solid in path of file You must check value of …","See [set_count_nb_threads]","Free a Solid. In Python use del on Solid object.","Create a new Solid from value in Counter In python …","Get the solidity status of <code>kmer</code>","Get the solidity status of a canonical <code>kmer</code>","Create a new Solid. In python binding Solid is an object, …","Set the solidity status of <code>kmer</code> to <code>value</code>","Set the solidity status of a canonical <code>kmer</code> to <code>value</code>","Prompt COuNter is short kmer counter","","","","Perform kmer count","Convert count in usable format","Minimal abundance","Minimal abundance","","","","","","","","","Path where count is write in bin","","","","","","","","","","","Path where count is write in csv","Path where count is write in csv","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Path to inputs","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Size of kmer","“Path where count are store in binary format”","Number of sequence record load in buffer, default 8192","Path where count is write in solid format","Path where count is write in solid format","Path where kmer spectrum is write","Path where kmer spectrum is write","","Number of thread use by pcon to count, 0 use all avaible …","","","","","","","","","","","","","","","","","verbosity level also control by environment variable …","","","","","","A counter of kmer based on cocktail crate 2bit conversion, …","","","Read the given an instance of io::Read as a fasta format …","","","Deserialize counter for given std::io::Read","","Returns the argument unchanged.","Get the counter of a kmer","Get the counter of a canonical kmer","Increase the counter of a kmer","Increase the counter of a canonical kmer","","Calls <code>U::from(self)</code>.","Convert a counter in a StaticCounter","","Create a new Counter for kmer size equal to k, …","Serialize counter in given std::io::Write","","","","Write in the given instance of io::Write the count in …","Write in the given instance of io::Write the count in …","","Serialize in the given instance of io::Write an instance …","Write in the given instance of io::Write the kmer spectrum …","You must set at least one dump option csv, solid, spectrum","We can’t create file. In C binding it’s equal to 0","We can’t open file. In C binding it’s equal to 1","Error emmit durring Cli parsing","See enum Cli","All error produce by Pcon","Error durring read file. In C binding it’s equal to 3","Error durring write in file. In C binding it’s equal to 2","Error emmit when pcon try to work with file","See enum IO","Kmer is store 2bit form on 64bit we can’t manage larger …","For efficient computation of canonical the kmer size must …","No error, this exist only for C binding it’s the value …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A struct to store if a kmer is Solid or not. Only kmer …","","","","","Deserialize counter for given std::io::Read","","Returns the argument unchanged.","Create a new Solid with count in <code>counter</code> only kmer upper …","Get the solidity status of <code>kmer</code>","Get the solidity status of a canonical <code>kmer</code>","","Calls <code>U::from(self)</code>.","","Create a new Solid for kmer size equal to <code>k</code>","Serialize counter in given std::io::Write","Solidity status of <code>kmer</code> is set to <code>value</code>","Solidity status of a canonical<code>kmer</code> is set to <code>value</code>","","","","The first local minimum match with the intersection of …","Remove at least n percent of total kmer","Remove at most n percent of total kmer","More we remove kmer less we remove Erroneous kmer when …","A struct to represent kmer spectrum and usefull …","Based on Kmergenie we assume kmer spectrum is a mixture of …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","A struct to get a fast access to count","","","","","Deserialize counter for given std::io::Read","","Returns the argument unchanged.","Get the counter of a kmer","Get the counter of a canonical kmer","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,2,3,4,2,3,4,2,3,1,1,3,4,1,2,3,4,1,2,3,0,0,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,1,0,4,1,2,3,3,2,4,1,2,3,4,1,2,3,4,1,2,3,2,2,2,2,3,2,3,4,4,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,0,0,0,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,8,9,9,0,10,0,9,9,0,10,8,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,8,9,10,10,8,8,9,9,10,10,10,8,9,10,8,9,10,8,9,10,10,8,9,10,8,9,10,8,9,10,8,9,11,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,0,0,15,14,15,14,15,14,15,14,15,14,14,14,15,14,15,15,15,14,15,14,15,14,15,14,15,14,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16],"f":[null,null,null,null,null,null,[[["usize",0]]],null,null,null,[[["counter",3],["usize",0],["io",4]]],[[]],[[["counter",3],["u64",0]],["count",6]],[[["counter",3],["u64",0]],["count",6]],[[["counter",3],["u64",0]]],[[["counter",3],["u64",0]]],[[["u8",0]]],[[["counter",3],["io",4]]],[[["solid",3],["io",4]]],[[["counter",3],["count",6],["io",4]]],[[["counter",3],["count",6],["io",4]]],[[["counter",3],["io",4]]],[[]],[[]],[[["counter",3],["io",4]]],[[["solid",3],["io",4]]],[[["usize",0]]],[[]],[[["counter",3],["count",6]]],[[["solid",3],["u64",0]],["bool",0]],[[["solid",3],["u64",0]],["bool",0]],[[["u8",0]]],[[["solid",3],["u64",0],["bool",0]]],[[["solid",3],["u64",0],["bool",0]]],null,null,null,null,null,null,null,null,[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[["app",3]],["app",3]],[[["app",3]],["app",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["subcommandcount",3]],["result",4,[["subcommandcount",3],["error",4]]]],[[["subcommanddump",3]],["result",4,[["subcommanddump",3],["error",4]]]],null,null,[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["str",0]],["bool",0]],[[["i8",0]],["option",4,[["level",4]]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],null,null,[[]],[[]],[[]],[[]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[],["app",3]],[[],["app",3]],null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],null,null,null,[[["subcommandcount",3]],["result",6]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["usize",0]]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",6]],[[["usize",0]]],[[]],[[["",0],["u64",0]],["count",6]],[[["",0],["u64",0]],["count",6]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[],["usize",0]],[[]],[[],["staticcounter",3]],null,[[["u8",0]]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["counter",3]],["result",6]],[[["counter",3],["count",6]],["result",6]],[[["subcommanddump",3]],["result",6]],[[["counter",3],["count",6]],["result",6]],[[["counter",3]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["io",4]]],[[["cli",4]]],[[]],[[]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",6]],[[["usize",0]]],[[]],[[["counter",3],["count",6]]],[[["",0],["u64",0]],["bool",0]],[[["",0],["u64",0]],["bool",0]],[[],["usize",0]],[[]],null,[[["u8",0]]],[[["",0]],["result",6]],[[["",0],["u64",0],["bool",0]]],[[["",0],["u64",0],["bool",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]]],[[["usize",0]]],[[["",0],["thresholdmethod",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["counter",3]]],[[["",0],["thresholdmethod",4],["f64",0]],["option",4,[["u8",0]]]],[[],["usize",0]],[[],["usize",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6]],[[["",0],["option",4,[["u8",0]]]],["result",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",6]],[[["usize",0]]],[[]],[[["",0],["u64",0]],["count",6]],[[["",0],["u64",0]],["count",6]],[[],["usize",0]],[[]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"SubCommand"],[3,"SubCommandCount"],[3,"SubCommandDump"],[3,"Command"],[13,"Count"],[13,"Dump"],[3,"Counter"],[4,"Cli"],[4,"IO"],[4,"Error"],[13,"Cli"],[13,"IO"],[3,"Solid"],[4,"ThresholdMethod"],[3,"Spectrum"],[3,"StaticCounter"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};