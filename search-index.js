var searchIndex = JSON.parse('{\
"pcon":{"doc":"","i":[[0,"cli","pcon","",null,null],[3,"Command","pcon::cli","",null,null],[12,"subcmd","","",0,null],[12,"threads","","",0,null],[12,"verbosity","","",0,null],[4,"SubCommand","","",null,null],[13,"Count","","",1,null],[13,"Dump","","",1,null],[3,"SubCommandCount","","",null,null],[12,"kmer","","",2,null],[12,"inputs","","",2,null],[12,"output","","",2,null],[12,"record_buffer","","",2,null],[12,"abundance","","",2,null],[12,"csv","","",2,null],[12,"solid","","",2,null],[12,"spectrum","","",2,null],[3,"SubCommandDump","","",null,null],[12,"input","","",3,null],[12,"abundance","","",3,null],[12,"csv","","",3,null],[12,"solid","","",3,null],[12,"spectrum","","",3,null],[12,"bin","","",3,null],[5,"check_count_param","","",null,[[["subcommandcount",3]],[["subcommandcount",3],["result",4],["error",4]]]],[5,"check_dump_param","","",null,[[["subcommanddump",3]],[["subcommanddump",3],["error",4],["result",4]]]],[5,"i82level","","",null,[[],[["option",4],["level",4]]]],[0,"error","pcon","",null,null],[4,"Error","pcon::error","All error produce by Pcon",null,null],[13,"Cli","","See enum [Cli]",4,null],[13,"IO","","See enum [IO]",4,null],[4,"Cli","","Error emmit durring Cli parsing",null,null],[13,"KMustBeOdd","","For efficient computation of canonical the kmer size must …",5,null],[13,"KMustBeLower32","","Kmer is store 2bit form on 64bit we can\'t manage larger …",5,null],[13,"ADumpOptionMustBeSet","","You must set at least one dump option csv, solid, spectrum",5,null],[4,"IO","","Error emmit when pcon try to work with file",null,null],[13,"CantCreateFile","","We can\'t create file. In C binding it\'s equal to 0",6,null],[13,"CantOpenFile","","We can\'t open file. In C binding it\'s equal to 1",6,null],[13,"ErrorDurringWrite","","Error durring write in file. In C binding it\'s equal to 2",6,null],[13,"ErrorDurringRead","","Error durring read file. In C binding it\'s equal to 3",6,null],[13,"NoError","","No error, this exist only for C binding it\'s the value of …",6,null],[0,"count","pcon","",null,null],[5,"count","pcon::count","",null,[[["subcommandcount",3]],["result",6]]],[0,"counter","pcon","",null,null],[6,"AtoCount","pcon::counter","",null,null],[6,"Count","","",null,null],[3,"Counter","","A counter of kmer based on cocktail crate 2bit …",null,null],[12,"k","","",7,null],[11,"new","","Create a new Counter for kmer size equal to k, …",7,[[]]],[11,"count_fasta","","Read the given an instance of io::Read as a fasta format …",7,[[]]],[11,"inc","","Increase the counter of a kmer",7,[[]]],[11,"inc_canonic","","Increase the counter of a canonical kmer",7,[[]]],[11,"get","","Get the counter of a kmer",7,[[],["count",6]]],[11,"get_canonic","","Get the counter of a canonical kmer",7,[[],["count",6]]],[11,"serialize","","Serialize counter in given [std::io::Write]",7,[[],["result",6]]],[11,"deserialize","","Deserialize counter for given [std::io::Read]",7,[[],["result",6]]],[0,"dump","pcon","",null,null],[5,"dump","pcon::dump","",null,[[["subcommanddump",3]],["result",6]]],[5,"binary","","Write in the given instance of io::Write the count in …",null,[[["counter",3]],["result",6]]],[5,"csv","","Write in the given instance of io::Write the count in …",null,[[["counter",3],["count",6]],["result",6]]],[5,"solid","","Serialize in the given instance of io::Write an instance …",null,[[["counter",3],["count",6]],["result",6]]],[5,"spectrum","","Write in the given instance of io::Write the kmer …",null,[[["counter",3]],["result",6]]],[0,"solid","pcon","",null,null],[3,"Solid","pcon::solid","A struct to store if a kmer is Solid or not. Only kmer …",null,null],[12,"k","","",8,null],[11,"new","","Create a new Solid for kmer size equal to <code>k</code>",8,[[]]],[11,"from_counter","","Create a new Solid with count in <code>counter</code> only kmer upper …",8,[[["counter",3],["count",6]]]],[11,"set","","Solidity status of <code>kmer</code> is set to <code>value</code>",8,[[]]],[11,"set_canonic","","Solidity status of a canonical<code>kmer</code> is set to <code>value</code>",8,[[]]],[11,"get","","Get the solidity status of <code>kmer</code>",8,[[]]],[11,"get_canonic","","Get the solidity status of a canonical <code>kmer</code>",8,[[]]],[11,"serialize","","Serialize counter in given [std::io::Write]",8,[[],["result",6]]],[11,"deserialize","","Deserialize counter for given [std::io::Read]",8,[[],["result",6]]],[0,"spectrum","pcon","",null,null],[4,"ThresholdMethod","pcon::spectrum","Based on Kmergenie we assume kmer spectrum is a mixture …",null,null],[13,"FirstMinimum","","The first local minimum match with the intersection of …",9,null],[13,"Rarefaction","","More we remove kmer less we remove Erroneous kmer when …",9,null],[13,"PercentAtMost","","Remove at most n percent of total kmer",9,null],[13,"PercentAtLeast","","Remove at least n percent of total kmer",9,null],[3,"Spectrum","","A struct to represent kmer spectrum and usefull …",null,null],[11,"from_counter","","",10,[[["counter",3]]]],[11,"get_threshold","","",10,[[["thresholdmethod",4]],["option",4]]],[11,"write_csv","","",10,[[],["result",6]]],[11,"write_histogram","","",10,[[["option",4]],["result",6]]],[0,"binding","pcon","",null,null],[5,"pcon_error_new","pcon::binding","Create a new pcon io error it\'s init to no error, see […",null,[[]]],[5,"pcon_error_free","","Free a pcon io error",null,[[]]],[5,"pcon_counter_new","","Create a new Counter. In python binding Counter is an …",null,[[]]],[5,"pcon_counter_free","","Free a Counter. In Python use del on Counter object.",null,[[]]],[5,"pcon_counter_count_fasta","","Perform count of kmer in fasta file in path, this file …",null,[[["counter",3],["io",4]]]],[5,"pcon_counter_inc","","Increase the count of <code>kmer</code>",null,[[["counter",3]]]],[5,"pcon_counter_inc_canonic","","Increase the count of a canonical <code>kmer</code>",null,[[["counter",3]]]],[5,"pcon_counter_get","","Get the count of value <code>kmer</code>",null,[[["counter",3]],["count",6]]],[5,"pcon_counter_get_canonic","","Get the count of value a canonical <code>kmer</code>",null,[[["counter",3]],["count",6]]],[5,"pcon_serialize_counter","","Serialize Counter in path of file You must check value of …",null,[[["counter",3],["io",4]]]],[5,"pcon_deserialize_counter","","Deserialize Counter from <code>c_path</code> in <code>counter</code> You must check …",null,[[["counter",3],["io",4]]]],[5,"pcon_solid_new","","Create a new Solid. In python binding Solid is an object, …",null,[[]]],[5,"pcon_solid_from_counter","","Create a new Solid from value in Counter In python …",null,[[["counter",3],["count",6]]]],[5,"pcon_solid_free","","Free a Solid. In Python use del on Solid object.",null,[[]]],[5,"pcon_solid_set","","Set the solidity status of <code>kmer</code> to <code>value</code>",null,[[["solid",3]]]],[5,"pcon_solid_set_canonic","","Set the solidity status of a canonical <code>kmer</code> to <code>value</code>",null,[[["solid",3]]]],[5,"pcon_solid_get","","Get the solidity status of <code>kmer</code>",null,[[["solid",3]]]],[5,"pcon_solid_get_canonic","","Get the solidity status of a canonical <code>kmer</code>",null,[[["solid",3]]]],[5,"pcon_serialize_solid","","Serialize Solid in path of file You must check value of …",null,[[["solid",3],["io",4]]]],[5,"pcon_deserialize_solid","","Deserialize Solid from <code>c_path</code> in <code>counter</code> You must check …",null,[[["solid",3],["io",4]]]],[5,"pcon_dump_csv","","See [dump::csv]. You must check value of <code>io_error</code> is …",null,[[["counter",3],["count",6],["io",4]]]],[5,"pcon_dump_solid","","See [dump::solid()]. You must check value of <code>io_error</code> is …",null,[[["counter",3],["count",6],["io",4]]]],[5,"pcon_dump_spectrum","","See [dump::spectrum]. You must check value of <code>io_error</code> is …",null,[[["counter",3],["io",4]]]],[5,"pcon_set_nb_threads","","See [set_count_nb_threads]",null,[[]]],[5,"set_nb_threads","pcon","Set the number of threads use by pcon",null,[[]]],[11,"from","pcon::cli","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"init","","",0,[[]]],[11,"deref","","",0,[[]]],[11,"deref_mut","","",0,[[]]],[11,"drop","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"init","","",1,[[]]],[11,"deref","","",1,[[]]],[11,"deref_mut","","",1,[[]]],[11,"drop","","",1,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"init","","",2,[[]]],[11,"deref","","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"drop","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"init","","",3,[[]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"drop","","",3,[[]]],[11,"from","pcon::error","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"as_error_source","","",4,[[],["error",8]]],[11,"vzip","","",4,[[]]],[11,"init","","",4,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",4,[[]]],[11,"drop","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_string","","",5,[[],["string",3]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"as_error_source","","",5,[[],["error",8]]],[11,"vzip","","",5,[[]]],[11,"init","","",5,[[]]],[11,"deref","","",5,[[]]],[11,"deref_mut","","",5,[[]]],[11,"drop","","",5,[[]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"as_error_source","","",6,[[],["error",8]]],[11,"vzip","","",6,[[]]],[11,"init","","",6,[[]]],[11,"deref","","",6,[[]]],[11,"deref_mut","","",6,[[]]],[11,"drop","","",6,[[]]],[11,"from","pcon::counter","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"init","","",7,[[]]],[11,"deref","","",7,[[]]],[11,"deref_mut","","",7,[[]]],[11,"drop","","",7,[[]]],[11,"from","pcon::solid","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"init","","",8,[[]]],[11,"deref","","",8,[[]]],[11,"deref_mut","","",8,[[]]],[11,"drop","","",8,[[]]],[11,"from","pcon::spectrum","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"init","","",9,[[]]],[11,"deref","","",9,[[]]],[11,"deref_mut","","",9,[[]]],[11,"drop","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"init","","",10,[[]]],[11,"deref","","",10,[[]]],[11,"deref_mut","","",10,[[]]],[11,"drop","","",10,[[]]],[11,"from","pcon::error","",4,[[["cli",4]]]],[11,"from","","",4,[[["io",4]]]],[11,"eq","pcon::spectrum","",9,[[["thresholdmethod",4]]]],[11,"fmt","pcon::cli","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","pcon::error","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","pcon::spectrum","",9,[[["formatter",3]],["result",6]]],[11,"fmt","pcon::error","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"source","","",4,[[],[["option",4],["error",8]]]],[11,"into_app","pcon::cli","",0,[[],["app",3]]],[11,"augment_clap","","",0,[[["app",3]],["app",3]]],[11,"into_app","","",1,[[],["app",3]]],[11,"augment_clap","","",1,[[["app",3]],["app",3]]],[11,"into_app","","",2,[[],["app",3]]],[11,"augment_clap","","",2,[[["app",3]],["app",3]]],[11,"into_app","","",3,[[],["app",3]]],[11,"augment_clap","","",3,[[["app",3]],["app",3]]],[11,"from_arg_matches","","",0,[[["argmatches",3]]]],[11,"from_arg_matches","","",1,[[["argmatches",3]]]],[11,"from_arg_matches","","",2,[[["argmatches",3]]]],[11,"from_arg_matches","","",3,[[["argmatches",3]]]],[11,"augment_subcommands","","",1,[[["app",3]],["app",3]]],[11,"from_subcommand","","",1,[[["option",4]],["option",4]]]],"p":[[3,"Command"],[4,"SubCommand"],[3,"SubCommandCount"],[3,"SubCommandDump"],[4,"Error"],[4,"Cli"],[4,"IO"],[3,"Counter"],[3,"Solid"],[4,"ThresholdMethod"],[3,"Spectrum"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);