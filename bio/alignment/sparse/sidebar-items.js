initSidebarItems({"fn":[["expand_kmer_matches",""],["find_kmer_matches","Find all matches of length k between two strings, using a q-gram index. For very long reference strings, it may be more efficient to use and FMD index to generate the matches. Note that this method is mainly for demonstration & testing purposes.  For aligning many query sequences against the same reference, you should reuse the QGramIndex of the reference."],["find_kmer_matches_seq1_hashed",""],["find_kmer_matches_seq2_hashed",""],["hash_kmers","Creates a HashMap containing all the k-mers in the sequence. FxHasher is used as the hash function instead of the inbuilt one. A good rolling hash function should speed up the code."],["lcskpp","Sparse DP routine for Longest Common Subsequence in length k substrings.  Also known of LCSk++ From LCSk++: Practical similarity metric for long strings. Filip Pavetić, Goran Žužić, Mile Šikić Paper here :https://arxiv.org/abs/1407.2407.  Original implementation here: https://github.com/fpavetic/lcskpp"],["sdpkpp","Sparse DP routine generalizing LCSk++ method above to penalize alignment gaps. A gap is an unknown combination of mismatch, insertion and deletions, and incurs a penalty of gap_open + d * gap_extend, where d is the distance along the diagonal of the gap."],["sdpkpp_union_lcskpp_path",""]],"struct":[["SparseAlignmentResult","Result of a sparse alignment"]],"type":[["HashMapFx",""]]});