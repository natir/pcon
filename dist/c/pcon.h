/* c bindings to the pcon */

#ifndef _PCON_HEADER_GUARD_
#define _PCON_HEADER_GUARD_

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum {
  CantCreateFile,
  CantOpenFile,
  ErrorDurringWrite,
  ErrorDurringRead,
  None,
} IO;

typedef struct Counter Counter;

typedef struct Solid Solid;

typedef uint8_t Count;

void pcon_counter_count_fasta(Counter *counter, const char *c_path, IO *io_error);

void pcon_counter_count_fastq(Counter *counter, const char *c_path, IO *io_error);

void pcon_counter_free(Counter *counter);

Count pcon_counter_get(const Counter *counter, uint64_t kmer);

void pcon_counter_inc(Counter *counter, uint64_t kmer);

Counter *pcon_counter_new(uint8_t k);

void pcon_deserialize_counter(Counter *counter, const char *c_path, IO *io_error);

void pcon_deserialize_solid(Solid *solid, const char *c_path, IO *io_error);

void pcon_dump_csv(const Counter *counter, uint8_t abundance, const char *c_path, IO *io_error);

void pcon_dump_solid(const Counter *counter, uint8_t abundance, const char *c_path, IO *io_error);

void pcon_dump_spectrum(const Counter *counter, const char *c_path, IO *io_error);

void pcon_error_free(IO *error);

IO *pcon_error_new(void);

void pcon_serialize_counter(const Counter *counter, const char *c_path, IO *io_error);

void pcon_serialize_solid(const Solid *solid, const char *c_path, IO *io_error);

void pcon_solid_free(Solid *solid);

Solid *pcon_solid_from_counter(const Counter *counter, uint8_t abundance);

bool pcon_solid_get(Solid *solid, uint64_t kmer);

Solid *pcon_solid_new(uint8_t k);

void pcon_solid_set(Solid *solid, uint64_t kmer, bool value);

#endif /* _PCON_HEADER_GUARD_ */
