initSidebarItems({"fn":[["pcon_counter_count_fasta","Perform count of kmer in fasta file in path, this file can be compress in gzip, bzip2, xz. You must check value of `io_error` is equal to NoError before use `counter`."],["pcon_counter_free","Free a Counter. In Python use del on Counter object."],["pcon_counter_get","Get the count of value `kmer`"],["pcon_counter_get_canonic","Get the count of value a canonical `kmer`"],["pcon_counter_inc","Increase the count of `kmer`"],["pcon_counter_inc_canonic","Increase the count of a canonical `kmer`"],["pcon_counter_new","Create a new Counter. In python binding Counter is an object, new is the default constructor. See [counter::Counter::new]."],["pcon_deserialize_counter","Deserialize Counter from `c_path` in `counter` You must check value of `io_error` is equal to NoError before use `counter`"],["pcon_deserialize_solid","Deserialize Solid from `c_path` in `counter` You must check value of `io_error` is equal to NoError before use `solid`"],["pcon_dump_csv","See [dump::csv]. You must check value of `io_error` is equal to NoError to be sure no problem occure durring write"],["pcon_dump_solid","See [dump::solid()]. You must check value of `io_error` is equal to NoError to be sure no problem occure durring write"],["pcon_dump_spectrum","See [dump::spectrum]. You must check value of `io_error` is equal to NoError to be sure no problem occure durring write"],["pcon_error_free","Free a pcon io error"],["pcon_error_new","Create a new pcon io error itâ€™s init to no error, see [error::IO]. In python corresponding string error is emit."],["pcon_serialize_counter","Serialize Counter in path of file You must check value of `io_error` is equal to NoError before use `counter`"],["pcon_serialize_solid","Serialize Solid in path of file You must check value of `io_error` is equal to NoError before use `solid`"],["pcon_set_nb_threads","See [set_count_nb_threads]"],["pcon_solid_free","Free a Solid. In Python use del on Solid object."],["pcon_solid_from_counter","Create a new Solid from value in Counter In python binding, this is a Solid class method from_counter. See [solid::Solid::from_counter]."],["pcon_solid_get","Get the solidity status of `kmer`"],["pcon_solid_get_canonic","Get the solidity status of a canonical `kmer`"],["pcon_solid_new","Create a new Solid. In python binding Solid is an object, new is the default constructor. See [solid::Solid::new]"],["pcon_solid_set","Set the solidity status of `kmer` to `value`"],["pcon_solid_set_canonic","Set the solidity status of a canonical `kmer` to `value`"]]});