searchState.loadedDescShard("pcon", 0, "Prompt COuNter, a short kmer counter.\nDefine count type\nDefine count type for all never atomic thing\nCommand Line Interface declaration of project pcon\nRun count command\nGeneric struct of counter and implementation for many type\nRun dump command\nError struct of project pcon\nRun minicount command\nGeneric struct of minicounter and implementation for many …\nTools to serialize a Counter\nDefine Solid struct\nDefine Spectrum struct\nPrompt COuNter, a short kmer counter.\nSubCommand Count\nPerform count of kmer\nOutput in csv mode\nSubCommand Dump\nConvert pcon native output in other format\nChoose dump type\nInput in format fasta\nChoose input format\nSubCommand MiniCount\nPerform count of large kmer if associate minimizer is …\nOutput in bin mode\nOutput in solid mode\nEnumeration of subcommand\nGet abundance\nGet abundance\nGet abundance\nGet format inputs\nGet format inputs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet inputs\nGet inputs\nGet inputs\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet size of kmer\nGet size of kmer\nGet abundance\nGet size of minimizer\nGet output\nGet output\nGet output\nGet quiet\nGet record_buffer\nGet record_buffer\nSubCommand\nGet timestamp granularity\nGet verbosity level\nRun count\nA counter of kmer based on cocktail crate 2bit conversion, …\nPerform count on fasta input\nPerform count on fasta input\nPerform count on fasta input\nPerform count on fasta input\nPerform count on fasta input\nReturns the argument unchanged.\nCreate a new kmer by read a file\nCreate a new kmer by read a file\nCreate a new kmer by read a file\nCreate a new kmer by read a file\nCreate a new kmer by read a file\nGet count of a kmer\nGet count of a kmer\nGet count of a kmer\nGet count of a kmer\nGet count of a kmer\nGet count at on index\nCalls <code>U::from(self)</code>.\nGet value of k\nCreate a new kmer Counter with kmer size equal to k\nCreate a new kmer Counter with kmer size equal to k\nCreate a new kmer Counter with kmer size equal to k\nCreate a new kmer Counter with kmer size equal to k\nCreate a new kmer Counter with kmer size equal to k\nGet raw data\nConvert counter in serializer\nRun dump\nError if we can’t convert a DumpTypeFromStr\nContains the error value\nEnum to manage error\nCost io error\nError in logging system configuration\nContains the success value\nAlias of result\nError durring loading count type not match\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun count\nA counter of kmer, count only if minimizer is present more …\nPerform count on fasta input\nPerform count on fasta input\nPerform count on fasta input\nPerform count on fasta input\nPerform count on fasta input\nReturns the argument unchanged.\nGet count of a kmer\nGet count of a kmer\nGet count of a kmer\nGet count of a kmer\nGet count of a kmer\nGet mini_count at one index\nCalls <code>U::from(self)</code>.\nGet value of k\nGet kmer count data\nGet value of m\nGet mini count data\nCreate a new MiniCounter with kmer size equal to k and …\nCreate a new MiniCounter with kmer size equal to k and …\nCreate a new MiniCounter with kmer size equal to k and …\nCreate a new MiniCounter with kmer size equal to k and …\nCreate a new MiniCounter with kmer size equal to k and …\nWrite minicounter result in csv\nStruct to serialize counter\nWrite kmer count in csv format\nWrite kmer count in csv format\nWrite kmer count in csv format\nWrite kmer count in csv format\nWrite kmer count in csv format\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new Serialize from a Counter\nWrite counter in pcon format\nWrite counter in pcon format\nWrite counter in pcon format\nWrite counter in pcon format\nWrite counter in pcon format\nConvert counter in solid and write it\nConvert counter in solid and write it\nConvert counter in solid and write it\nConvert counter in solid and write it\nConvert counter in solid and write it\nA struct to store if a kmer is Solid or not. Only kmer …\nExtend\nReturns the argument unchanged.\nCreate a new Solid with count in <code>counter</code> only kmer upper …\nCreate a new Solid from path\nCreate a new Solid by read\nGet the solidity status of <code>kmer</code>\nGet the solidity status of a canonical <code>kmer</code>\nCalls <code>U::from(self)</code>.\nGet value of k\nCreate a new Solid for kmer size equal to <code>k</code>\nSolidity status of <code>kmer</code> is set to <code>value</code>\nSolidity status of a canonical<code>kmer</code> is set to <code>value</code>\nThe first local minimum match with the intersection of …\nRemove at least n percent of total kmer\nRemove at most n percent of total kmer\nMore we remove kmer less we remove Erroneous kmer when …\nA struct to represent kmer spectrum and usefull …\nBased on Kmergenie we assume kmer spectrum is a mixture of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Spectrum with count in <code>counter</code>\nFound threshold matching with method\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")